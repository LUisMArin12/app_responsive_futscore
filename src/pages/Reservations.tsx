import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { ClipboardList, Check, ArrowLeft } from 'lucide-react';
import { useAppContext } from '../contexts/AppContext';
import MatchCard from '../components/common/MatchCard';

const Reservations: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { matches, addReservation, reservations } = useAppContext();
  const [selectedMatchId, setSelectedMatchId] = useState<string | null>(null);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    seats: 1,
  });
  const [formErrors, setFormErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  
  // Get match ID from URL if available
  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const matchId = params.get('matchId');
    if (matchId) {
      setSelectedMatchId(matchId);
    }
  }, [location.search]);
  
  // Selected match
  const selectedMatch = selectedMatchId ? matches.find(m => m.id === selectedMatchId) : null;
  
  // Available matches for reservation (scheduled matches with seats available)
  const availableMatches = matches.filter(m => 
    m.status === 'scheduled' && m.remainingSeat > 0
  );
  
  // Handle form input change
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: name === 'seats' ? parseInt(value) : value,
    });
    
    // Clear error when field is updated
    if (formErrors[name]) {
      setFormErrors({
        ...formErrors,
        [name]: '',
      });
    }
  };
  
  // Validate form
  const validateForm = () => {
    const errors: Record<string, string> = {};
    
    if (!formData.name.trim()) {
      errors.name = 'Name is required';
    }
    
    if (!formData.email.trim()) {
      errors.email = 'Email is required';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      errors.email = 'Email es invalido';
    }
    
    if (formData.seats < 1) {
      errors.seats = 'Debe reservar al menos 1 asiento';
    } else if (selectedMatch && formData.seats > selectedMatch.remainingSeat) {
      errors.seats = `Solo ${selectedMatch.remainingSeat} asientos disponibles`;
    }
    
    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };
  
  // Handle form submission
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!selectedMatch) return;
    
    if (validateForm()) {
      setIsSubmitting(true);
      
      // Simulate API call
      setTimeout(() => {
        addReservation({
          id: '',  // Will be generated by the context
          matchId: selectedMatch.id,
          ...formData,
          createdAt: new Date(),
        });
        
        setIsSubmitting(false);
        setIsSuccess(true);
        
        // Reset after 3 seconds
        setTimeout(() => {
          setIsSuccess(false);
          setSelectedMatchId(null);
          setFormData({
            name: '',
            email: '',
            seats: 1,
          });
        }, 3000);
      }, 1000);
    }
  };
  
  // Handle match selection
  const handleSelectMatch = (matchId: string) => {
    setSelectedMatchId(matchId);
  };
  
  // Go back to match selection
  const handleBackToMatches = () => {
    setSelectedMatchId(null);
    navigate('/reservations');
  };
  
  // Your previous reservations
  const userReservations = reservations.slice().reverse();

  return (
    <div className="pb-16 md:pb-0">
      <h1 className="text-2xl font-bold mb-6 flex items-center">
        <ClipboardList size={24} className="mr-2" />
        {selectedMatch ? 'Reserva de entradas para partidos' : 'Reservas de partidos'}
      </h1>
      
      {selectedMatch ? (
        <div>
          <button 
            onClick={handleBackToMatches}
            className="mb-4 flex items-center text-primary-600 dark:text-primary-400 hover:underline"
          >
            <ArrowLeft size={18} className="mr-1" />
           Volver a todos los partidos
          </button>
          
          <div className="mb-6">
            <MatchCard match={selectedMatch} showActions={false} />
          </div>
          
          {isSuccess ? (
            <div className="card p-6 border-l-4 border-green-500">
              <div className="flex items-start">
                <div className="flex-shrink-0">
                  <Check size={24} className="text-green-500" />
                </div>
                <div className="ml-3">
                  <h3 className="text-lg font-medium text-green-800 dark:text-green-400">¡Reserva realizada con éxito!</h3>
                  <p className="text-green-700 dark:text-green-300 mt-2">
                   Has reservado con éxito {formData.seats} asientos {formData.seats > 1 ? 's' : ''} para el partido.
                    Se ha enviado un correo electrónico de confirmación a {formData.email}.
                  </p>
                  <button
                    onClick={handleBackToMatches}
                    className="mt-4 btn-outline border-green-500 text-green-700 dark:text-green-400"
                  >
                    Hacer otra reserva
                  </button>
                </div>
              </div>
            </div>
          ) : (
            <div className="card p-6">
              <h2 className="text-xl font-semibold mb-4">Formulario de reserva</h2>
              
              <form onSubmit={handleSubmit}>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                  <div>
                    <label htmlFor="name" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Nombre completo <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="text"
                      id="name"
                      name="name"
                      className={`input ${formErrors.name ? 'border-red-500' : ''}`}
                      value={formData.name}
                      onChange={handleInputChange}
                    />
                    {formErrors.name && (
                      <p className="mt-1 text-sm text-red-500">{formErrors.name}</p>
                    )}
                  </div>
                  
                  <div>
                    <label htmlFor="email" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Correo electrónico <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="email"
                      id="email"
                      name="email"
                      className={`input ${formErrors.email ? 'border-red-500' : ''}`}
                      value={formData.email}
                      onChange={handleInputChange}
                    />
                    {formErrors.email && (
                      <p className="mt-1 text-sm text-red-500">{formErrors.email}</p>
                    )}
                  </div>
            
                  <div>
                    <label htmlFor="seats" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Número de asientos <span className="text-red-500">*</span>
                    </label>
                    <div className="flex items-center">
                      <input
                        type="number"
                        id="seats"
                        name="seats"
                        min="1"
                        max={selectedMatch.remainingSeat}
                        className={`input ${formErrors.seats ? 'border-red-500' : ''}`}
                        value={formData.seats}
                        onChange={handleInputChange}
                      />
                      <span className="ml-2 text-sm text-gray-500 dark:text-gray-400">
                        ${selectedMatch.ticketPrice} / seat
                      </span>
                    </div>
                    {formErrors.seats && (
                      <p className="mt-1 text-sm text-red-500">{formErrors.seats}</p>
                    )}
                  </div>
                </div>
                
                <div className="border-t border-gray-200 dark:border-gray-700 pt-4 mt-4">
                  <div className="flex items-center justify-between mb-4">
                    <span className="font-medium">Precio total:</span>
                    <span className="text-lg font-bold">
                      ${formData.seats * selectedMatch.ticketPrice}
                    </span>
                  </div>
                  
                  <button 
                    type="submit" 
                    className="btn-primary w-full"
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? 'Processing...' : 'Complete Reservation'}
                  </button>
                  
                  <p className="text-xs text-gray-500 dark:text-gray-400 mt-2 text-center">
                    Al completar esta reserva, usted acepta nuestros Términos y Condiciones.
                  </p>
                </div>
              </form>
            </div>
          )}
        </div>
      ) : (
        <div>
          {/* Available Matches */}
          <section>
            <h2 className="text-lg font-semibold mb-4">Partidos disponibles</h2>
            
            {availableMatches.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
                {availableMatches.map(match => (
                  <div 
                    key={match.id} 
                    className="cursor-pointer" 
                    onClick={() => handleSelectMatch(match.id)}
                  >
                    <MatchCard match={match} />
                  </div>
                ))}
              </div>
            ) : (
              <div className="bg-white dark:bg-gray-800 rounded-lg p-6 text-center mb-8">
                <p className="text-gray-600 dark:text-gray-400">
                  No hay partidos disponibles para reservar en este momento.
                </p>
              </div>
            )}
          </section>
          
          {/* My Reservations */}
          {userReservations.length > 0 && (
            <section>
              <h2 className="text-lg font-semibold mb-4">Sus reservas</h2>
              
              <div className="space-y-4">
                {userReservations.map((reservation) => {
                  const match = matches.find(m => m.id === reservation.matchId);
                  if (!match) return null;
                  
                  const homeTeam = match.homeTeamId;
                  const awayTeam = match.awayTeamId;
                  
                  return (
                    <div key={reservation.id} className="card p-4">
                      <div className="flex flex-col md:flex-row md:items-center justify-between">
                        <div>
                          <div className="font-medium">
                            {homeTeam} vs {awayTeam}
                          </div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">
                            {match.date} at {match.time}
                          </div>
                          <div className="text-sm">
                            Asientos: {reservation.seats} | Total: ${reservation.seats * match.ticketPrice}
                          </div>
                        </div>
                        <div className="mt-2 md:mt-0">
                          <span className="badge bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300">
                            Confirmado
                          </span>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </section>
          )}
        </div>
      )}
    </div>
  );
};

export default Reservations;